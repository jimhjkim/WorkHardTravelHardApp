{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","getListType","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","console","log","getItem","s","parse","setListType","value","View","style","styles","container","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","placeholder","input","ScrollView","Object","keys","map","key","toDo","isComplete","completeToDo","Fontisto","name","size","isEdit","handleSubmitEditing","handleChangeText","inputEdit","toDoText","textDecorationLine","editToDo","FontAwesome","Platform","OS","confirm","Alert","alert","deleteToDo","StatusBar","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"oRAAaA,EACP,QADOA,EAEL,UAFKA,EAGJ,QAHIA,EAIH,U,wkBCgBK,SAASC,IACtB,MAA8BC,oBAAS,GAAvC,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,qBAAxB,WAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,WAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,IACAC,MACC,IAEH,IAUMC,EAAY,SAAOC,GAAP,SAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAERE,IAAaC,QAzBL,SAyB0BC,KAAKC,UAAUN,KAFzC,sDAIdO,QAAQC,IAAR,MAJc,gEAQZV,EAAY,0BAAAG,EAAAC,OAAA,kEAAAD,EAAA,MACAE,IAAaM,QAhCb,WA+BA,QACVC,EADU,SAGdf,EAASU,KAAKM,MAAMD,IAHN,6DAOZE,EAAc,SAAOC,GAAP,SAAAZ,EAAAC,OAAA,uDAClBX,EAAWsB,GADO,WAAAZ,EAAA,MAEZE,IAAaC,QAvCL,YAuCwBC,KAAKC,UAAUO,KAFnC,6DAKdhB,EAAc,0BAAAI,EAAAC,OAAA,kEAAAD,EAAA,MACFE,IAAaM,QA3Cf,cA0CI,OACZC,EADY,OAEdE,GAAJF,GAAgBL,KAAKM,MAAMD,IAFT,6DAmEpB,OACE,eAACI,EAAA,EAAD,CAAMC,MAAOC,EAAOC,UAApB,UACE,eAACH,EAAA,EAAD,CAAMC,MAAOC,EAAOE,OAApB,UACE,cAACC,EAAA,EAAD,CAAkBC,QAnGX,kBAAMR,GAAY,IAmGzB,SACE,cAACS,EAAA,EAAD,CACEN,MAAO,CACLO,SAAU,GACVC,WAAY,MACZC,MAAOlC,EAAUH,EAAcA,GAJnC,oBAUF,cAACgC,EAAA,EAAD,CAAkBC,QA/GT,kBAAMR,GAAY,IA+G3B,SACE,cAACS,EAAA,EAAD,CACEN,MAAO,CACLO,SAAU,GACVC,WAAY,MACZC,MAAOlC,EAAUH,EAAaA,GAJlC,yBAWJ,cAACsC,EAAA,EAAD,CACEC,gBAzFU,0BAAAzB,EAAAC,OAAA,mDACD,KAATV,EADU,wDAIRmC,EAJQ,OAIQjC,GAJR,UAIgBkC,KAAKC,MAAQ,CAAErC,OAAMF,aACnDK,EAASgC,GALK,WAAA1B,EAAA,MAMRF,EAAU4B,IANF,OAOdlC,EAAQ,IAPM,6DA0FVqC,aA3He,SAACC,GAAD,OAAatC,EAAQsC,IA4HpCC,cAAc,OACdnB,MAAOrB,EACPyC,YAAa3C,EAAU,cAAgB,2BACvCyB,MAAOC,EAAOkB,QAEhB,cAACC,EAAA,EAAD,UACGC,OAAOC,KAAK3C,GAAO4C,KAAI,SAACC,GAAD,OACtB7C,EAAM6C,GAAKjD,UAAYA,EACrB,eAACwB,EAAA,EAAD,CAAMC,MAAOC,EAAOwB,KAApB,UACE,cAACrB,EAAA,EAAD,CAAkBC,QAAS,kBA1FlB,SAACmB,GACpB7C,EAAM6C,GAAN,OAAkB7C,EAAM6C,IAAxB,IAA8BE,YAAa/C,EAAM6C,GAAKE,aACtD,IAAMd,EAAQ,OAAQjC,GAAR,UAAgB6C,EAAM7C,EAAM6C,KAC1C5C,EAASgC,GACT5B,EAAU4B,GAsFiCe,CAAaH,IAA9C,SACE,cAAClB,EAAA,EAAD,UACE,cAACsB,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAM,GAAIrB,MAAOrC,QAG3CO,EAAM6C,GAAKO,OACV,cAACrB,EAAA,EAAD,CACEC,gBAAiB,kBAnFL,SAAOa,GAAP,eAAAtC,EAAAC,OAAA,mDACF,KAApBR,EAAM6C,GAAK/C,KADW,wDAE1BE,EAAM6C,GAAN,OAAkB7C,EAAM6C,IAAxB,IAA8BO,QAAQ,IAEhCnB,EAJoB,OAKrBjC,GALqB,UAMvB6C,EAAM7C,EAAM6C,KAEf5C,EAASgC,GARiB,WAAA1B,EAAA,MASpBF,EAAU4B,IATU,4DAmFWoB,CAAoBR,IAC3CT,aAAc,SAACtC,GAAD,OA5IL,SAAC,GAAmB,IAAjB+C,EAAgB,EAAhBA,IAAK/C,EAAW,EAAXA,KAC/BG,EAAS,EAAD,KACHD,GADG,UAEL6C,EAFK,OAEM7C,EAAM6C,IAFZ,IAEkB/C,YAyIYwD,CAAiB,CAAET,MAAK/C,UAChDqB,MAAOnB,EAAM6C,GAAK/C,KAClBuB,MAAOC,EAAOiC,UACdjB,cAAc,SAGhB,cAACX,EAAA,EAAD,CACEN,MAAK,OACAC,EAAOkC,UADP,IAEHC,mBAAoBzD,EAAM6C,GAAKE,WAC3B,eACA,SALR,SAQG/C,EAAM6C,GAAK/C,OAGhB,cAAC2B,EAAA,EAAD,CAAkBC,QAAS,kBA5GtB,SAACmB,GAChB7C,EAAM6C,GAAN,OAAkB7C,EAAM6C,IAAxB,IAA8BO,QAAQ,IACtC,IAAMnB,EAAQ,OAAQjC,GAAR,UAAgB6C,EAAM7C,EAAM6C,KAC1C5C,EAASgC,GACT5B,EAAU4B,GAwGiCyB,CAASb,IAA1C,SACE,cAAClB,EAAA,EAAD,UACE,cAACgC,EAAA,EAAD,CAAaT,KAAK,SAASC,KAAM,GAAIrB,MAAOrC,QAGhD,cAACgC,EAAA,EAAD,CAAkBC,QAAS,kBA9FpB,SAAOmB,GAAP,eAAAtC,EAAAC,OAAA,gDACG,QAAhBoD,IAASC,GACAC,QAAQ,8CAEX7B,EADA,KACgBjC,IACN6C,GAChB5C,EAASgC,GACT5B,EAAU4B,IAGZ8B,IAAMC,MAAM,gBAAiB,gBAAiB,CAC5C,CAAElE,KAAM,UACR,CACEA,KAAM,WACNuB,MAAO,cACPK,QAAS,WACP,IAAMO,EAAQ,KAAQjC,UACfiC,EAASY,GAChB5C,EAASgC,GACT5B,EAAU4B,OAnBD,4DA8F0BgC,CAAWpB,IAA5C,SACE,cAAClB,EAAA,EAAD,UACE,cAACsB,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAM,GAAIrB,MAAOrC,UAjCfoD,GAqC7B,UAGR,cAACqB,EAAA,EAAD,CAAW7C,MAAM,YAKvB,IAAMC,EAAS6C,IAAWC,OAAO,CAC/B7C,UAAW,CACT8C,KAAM,EACNC,gBAAiB7E,EACjB8E,kBAAmB,IAErB/C,OAAQ,CACNgD,eAAgB,gBAChBC,cAAe,MACfC,UAAW,KAEblC,MAAO,CACL8B,gBAAiB,QACjBK,gBAAiB,GACjBJ,kBAAmB,GACnBK,aAAc,GACdC,eAAgB,GAChBjD,SAAU,IAEZ2B,UAAW,CACTc,KAAM,GACNC,gBAAiB,QACjBK,gBAAiB,EACjBJ,kBAAmB,EACnBK,aAAc,EACdhD,SAAU,GACVE,MAAOrC,GAETqD,KAAM,CACJwB,gBAAiB7E,EACjBqF,aAAc,GACdH,gBAAiB,GACjBJ,kBAAmB,GACnBK,aAAc,GACdH,cAAe,MACfM,WAAY,SACZP,eAAgB,iBAElBhB,SAAU,CACR1B,MAAO,QACPF,SAAU,GACVC,WAAY,U","file":"static/js/app.8b6803e2.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  white: \"white\",\n  toDoBg: \"#5C5C60\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\nconst LIST_TYPE = \"@listType\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState();\n  const [toDos, setToDos] = useState({});\n\n  useEffect(() => {\n    getListType();\n    loadToDos();\n  }, []);\n\n  const travel = () => setListType(false);\n  const work = () => setListType(true);\n  const onChangeText = (payload) => setText(payload);\n  const handleChangeText = ({ key, text }) => {\n    setToDos({\n      ...toDos,\n      [key]: { ...toDos[key], text },\n    });\n  };\n\n  const saveToDos = async (toSave) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n\n  const setListType = async (value) => {\n    setWorking(value);\n    await AsyncStorage.setItem(LIST_TYPE, JSON.stringify(value));\n  };\n\n  const getListType = async () => {\n    const s = await AsyncStorage.getItem(LIST_TYPE);\n    s ? setListType(JSON.parse(s)) : setListType(true);\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  const completeToDo = (key) => {\n    toDos[key] = { ...toDos[key], isComplete: !toDos[key].isComplete };\n    const newToDos = { ...toDos, [key]: toDos[key] };\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const editToDo = (key) => {\n    toDos[key] = { ...toDos[key], isEdit: true };\n    const newToDos = { ...toDos, [key]: toDos[key] };\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  const handleSubmitEditing = async (key) => {\n    if (toDos[key].text === \"\") return;\n    toDos[key] = { ...toDos[key], isEdit: false };\n\n    const newToDos = {\n      ...toDos,\n      [key]: toDos[key],\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n  };\n\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm sure\",\n          style: \"destructive\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? theme.white : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? theme.grey : theme.white,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <TouchableOpacity onPress={() => completeToDo(key)}>\n                <Text>\n                  <Fontisto name=\"check\" size={18} color={theme.grey} />\n                </Text>\n              </TouchableOpacity>\n              {toDos[key].isEdit ? (\n                <TextInput\n                  onSubmitEditing={() => handleSubmitEditing(key)}\n                  onChangeText={(text) => handleChangeText({ key, text })}\n                  value={toDos[key].text}\n                  style={styles.inputEdit}\n                  returnKeyType=\"done\"\n                ></TextInput>\n              ) : (\n                <Text\n                  style={{\n                    ...styles.toDoText,\n                    textDecorationLine: toDos[key].isComplete\n                      ? \"line-through\"\n                      : \"none\",\n                  }}\n                >\n                  {toDos[key].text}\n                </Text>\n              )}\n              <TouchableOpacity onPress={() => editToDo(key)}>\n                <Text>\n                  <FontAwesome name=\"pencil\" size={18} color={theme.grey} />\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Text>\n                  <Fontisto name=\"trash\" size={18} color={theme.grey} />\n                </Text>\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  inputEdit: {\n    flex: 0.8,\n    backgroundColor: \"white\",\n    paddingVertical: 5,\n    paddingHorizontal: 5,\n    borderRadius: 5,\n    fontSize: 15,\n    color: theme.grey,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 20,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}